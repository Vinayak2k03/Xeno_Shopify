// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Add this field
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  tenants       Tenant[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Business Models
model Tenant {
  id                String    @id @default(cuid())
  name              String
  shopifyDomain     String    @unique
  shopifyAccessToken String?
  apiKey            String?
  apiSecret         String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers         Customer[]
  orders            Order[]
  products          Product[]
  syncLogs          SyncLog[]

  @@map("tenants")
}

model Customer {
  id               String    @id @default(cuid())
  shopifyId        String
  tenantId         String
  email            String?
  firstName        String?
  lastName         String?
  phone            String?
  totalSpent       Decimal   @default(0)
  ordersCount      Int       @default(0)
  tags             String[]  @default([])
  acceptsMarketing Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders           Order[]

  @@unique([shopifyId, tenantId])
  @@map("customers")
}

model Product {
  id          String    @id @default(cuid())
  shopifyId   String
  tenantId    String
  title       String
  handle      String?
  description String?   @db.Text
  vendor      String?
  productType String?
  tags        String[]  @default([])
  status      String    @default("active")
  images      Json?
  variants    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@unique([shopifyId, tenantId])
  @@map("products")
}

model Order {
  id                String      @id @default(cuid())
  shopifyId         String
  tenantId          String
  customerId        String?
  orderNumber       String
  email             String?
  totalPrice        Decimal
  subtotalPrice     Decimal?
  totalTax          Decimal?
  totalShipping     Decimal?
  currency          String      @default("USD")
  financialStatus   String?
  fulfillmentStatus String?
  tags              String[]    @default([])
  note              String?
  processedAt       DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  tenant            Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer          Customer?   @relation(fields: [customerId], references: [id])
  orderItems        OrderItem[]

  @@unique([shopifyId, tenantId])
  @@map("orders")
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  productId       String?
  variantId       String?
  title           String
  quantity        Int
  price           Decimal
  totalDiscount   Decimal @default(0)
  
  // Relations
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product? @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model SyncLog {
  id                String    @id @default(cuid())
  tenantId          String
  syncType          String    // orders, customers, products, analytics
  success           Boolean
  recordsProcessed  Int       @default(0)
  duration          Int       // milliseconds
  error             String?   @db.Text
  createdAt         DateTime  @default(now())
  
  // Relations
  tenant            Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, syncType, createdAt])
  @@map("sync_logs")
}